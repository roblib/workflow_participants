<?php

/**
 * @file
 * Workflow participant hook implementations.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\workflow_participants\Entity\WorkflowParticipantsInterface;
use Drupal\workflow_participants\EntityOperations;
use Drupal\workflow_participants\EntityTypeInfo;

/**
 * Implements hook_help().
 */
function workflow_participants_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.workflow_participants':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= t('This module allows per-entity workflow participants to be configured. These participants can either be editors or reviewers. Content moderation states can be configured to allow editors, reviewers, or both, to make transitions. Reviewers cannot edit the content, only moderate. Editors can moderate and make changes.');
      $output .= '<h3>' . t('Setup and usage') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Permissions') . '</dt>';
      $output .= '<dd>' . t('Optionally configure roles with the <em>Allowed to be a workflow editor or reviewer</em> permission. If this is skipped, any active user can be an editor or reviewer.') . '</dd>';
      $output .= '<dt>' . t('Moderation state transitions') . '</dt>';
      $output .= '<dd>' . t('Edit <a href=":workflows">moderation states</a> and check the <em>Allow editors</em> and <em>Allow reviewers</em> as needed. ', [':workflows' => Url::fromRoute('entity.workflow.collection')->toString()]) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function workflow_participants_entity_type_alter(array &$entity_types) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityTypeInfo::class)
    ->alter($entity_types);
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function workflow_participants_form_workflow_transition_add_form_alter(array &$form, FormStateInterface $form_state) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterWorkflowTransitionsForm($form, $form_state);
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function workflow_participants_form_workflow_transition_edit_form_alter(array &$form, FormStateInterface $form_state) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterWorkflowTransitionsForm($form, $form_state);
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function workflow_participants_form_content_moderation_notification_form_alter(array &$form, FormStateInterface $form_state) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterNotificationsForm($form, $form_state);
}

/**
 * @defgroup access_hooks Entity access hook implementations.
 * @{
 */

/**
 * Implements hook_entity_access().
 */
function workflow_participants_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (!$entity instanceof ContentEntityInterface || !$entity->id()) {
    return AccessResult::neutral();
  }

  return \Drupal::service('workflow_participants.access_checker')->hasEntityAccess($entity, $operation, $account);
}

/**
 * @} End "defgroup access_hooks".
 */

/**
 * Implements hook_entity_operation().
 */
function workflow_participants_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity->hasLinkTemplate('workflow-participants')) {
    $operations['workflow-participants'] = [
      'title' => t('Workflow participants'),
      'url' => $entity->toUrl('workflow-participants'),
      'weight' => 27,
    ];
  }
  return $operations;
}

/**
 * Implements hook_workflow_participants_insert().
 */
function workflow_participants_workflow_participants_insert(WorkflowParticipantsInterface $entity) {
  \Drupal::service('workflow_participants.notifier')->processNotifications($entity);
}

/**
 * Implements hook_workflow_participants_update().
 */
function workflow_participants_workflow_participants_update(WorkflowParticipantsInterface $entity) {
  \Drupal::service('workflow_participants.notifier')->processNotifications($entity);
}

/**
 * Implements hook_entity_delete().
 */
function workflow_participants_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    // Remove corresponding participants entity when the moderated entity is
    // deleted.
    /** @var \Drupal\workflow_participants\Entity\WorkflowParticipantsInterface $participants */
    $participants = \Drupal::entityTypeManager()->getStorage('workflow_participants')->loadForModeratedEntity($entity);
    if (!$participants->isNew()) {
      $participants->delete();
    }
  }
}

/**
 * Implements hook_mail().
 */
function workflow_participants_mail($key, &$message, $params) {
  if ($key === 'new_participant') {
    $message['subject'] = $params['subject'];
    $message['body'] = [$params['body']];
  }
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 */
function workflow_participants_content_moderation_notification_mail_data_alter(EntityInterface $entity, array &$data) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterNotificationRecipients($entity, $data);
}
