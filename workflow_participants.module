<?php

/**
 * @file
 * Workflow participant hook implementations.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\content_moderation\ModerationStateTransitionInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\workflows\WorkflowInterface;

/**
 * Implements hook_form_BASE_ID_alter().
 */
function workflow_participants_form_workflow_edit_transition_form_alter(array &$form, FormStateInterface $form_state) {
  // Add editor and reviewer checkboxes.
  /** @var \Drupal\workflows\WorkflowInterface $workflow */
  $workflow = $form_state->getFormObject()->getEntity();
  $transition_id = isset($form['id']['#value']) ? $form['id']['#value'] : '';
  $form['enable_editors'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow editors to make this transition'),
    '#default_value' => in_array($transition_id, $workflow->getThirdPartySetting('workflow_participants', 'enable_editors', [])),
  ];
  $form['enable_reviewers'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow reviewers to make this transition'),
    '#default_value' => in_array($transition_id, $workflow->getThirdPartySetting('workflow_participants', 'enable_reviewers', [])),
  ];
  $form['#entity_builders'][] = 'workflow_participants_moderation_state_transition_form_builder';
}

/**
 * Form builder for the moderation transition state form.
 *
 * @see workflow_participants_form_moderation_state_transition_form_alter
 */
function workflow_participants_moderation_state_transition_form_builder($entity_type, WorkflowInterface $workflow, array &$form, FormStateInterface $form_state) {
  $transition_id = $form_state->getValue('id');
  foreach (['enable_editors', 'enable_reviewers'] as $enabled) {
    $transitions = $workflow->getThirdPartySetting('workflow_participants', $enabled, []);
    if ($form_state->getValue($enabled)) {
      $transitions[$transition_id] = $transition_id;
    }
    else {
      unset($transitions[$transition_id]);
    }
    $workflow->setThirdPartySetting('workflow_participants', $enabled, $transitions);
  }
}

/**
 * @defgroup access_hooks Entity access hook implementations.
 * @{
 */

/**
 * Implements hook_entity_access().
 */
function workflow_participants_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (!$entity instanceof ContentEntityInterface || !$entity->id()) {
    return AccessResult::neutral();
  }

  return \Drupal::service('workflow_participants.access_checker')->hasEntityAccess($entity, $operation, $account);
}

/**
 * @} End "defgroup access_hooks".
 */

/**
 * Implements hook_entity_operation().
 */
function workflow_participants_entity_operation(EntityInterface $entity) {
  // @todo Don't hard code for node.
  $operations = [];
  if ($entity instanceof NodeInterface) {
    $operations['workflow-participants'] = [
      'title' => t('Workflow participants'),
      'url' => Url::fromRoute('entity.node.workflow_participants', ['node' => $entity->id()]),
      'weight' => 27,
    ];
  }
  return $operations;
}
