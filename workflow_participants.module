<?php

/**
 * @file
 * Workflow participant hook implementations.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\workflow_participants\EntityOperations;

/**
 * Implements hook_form_BASE_ID_alter().
 */
function workflow_participants_form_workflow_transition_add_form_alter(array &$form, FormStateInterface $form_state) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterWorkflowTransitionsForm($form, $form_state);
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function workflow_participants_form_workflow_transition_edit_form_alter(array &$form, FormStateInterface $form_state) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterWorkflowTransitionsForm($form, $form_state);
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function workflow_participants_form_content_moderation_notification_form_alter(array &$form, FormStateInterface $form_state) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterNotificationsForm($form, $form_state);
}

/**
 * @defgroup access_hooks Entity access hook implementations.
 * @{
 */

/**
 * Implements hook_entity_access().
 */
function workflow_participants_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (!$entity instanceof ContentEntityInterface || !$entity->id()) {
    return AccessResult::neutral();
  }

  return \Drupal::service('workflow_participants.access_checker')->hasEntityAccess($entity, $operation, $account);
}

/**
 * @} End "defgroup access_hooks".
 */

/**
 * Implements hook_entity_operation().
 */
function workflow_participants_entity_operation(EntityInterface $entity) {
  // @todo Don't hard code for node.
  $operations = [];
  if ($entity instanceof NodeInterface) {
    $operations['workflow-participants'] = [
      'title' => t('Workflow participants'),
      'url' => Url::fromRoute('entity.node.workflow_participants', ['node' => $entity->id()]),
      'weight' => 27,
    ];
  }
  return $operations;
}

/**
 * Implements hook_entity_delete().
 */
function workflow_participants_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    // Remove corresponding participants entity when the moderated entity is
    // deleted.
    /** @var \Drupal\workflow_participants\Entity\WorkflowParticipantsInterface $participants */
    $participants = \Drupal::entityTypeManager()->getStorage('workflow_participants')->loadForModeratedEntity($entity);
    if (!$participants->isNew()) {
      $participants->delete();
    }
  }
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 */
function workflow_participants_content_moderation_notification_mail_data_alter(EntityInterface $entity, array &$data) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityOperations::class)
    ->alterNotificationRecipients($entity, $data);
}
